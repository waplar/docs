name: Deploy VitePress site to GitHub Pages

on:
    push:
        branches:
            - main
            - alpha.x
    workflow_dispatch:

permissions:
    contents: write  # 允许写入权限
    pages: write  # 确保 GitHub Actions 具有对 GitHub Pages 的写入权限
    id-token: write

concurrency:
    group: pages
    cancel-in-progress: false

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout code
                uses: actions/checkout@v4
                with:
                    fetch-depth: 0  # 获取完整历史记录，确保所有版本都能正确构建

            -   name: Setup Node.js
                uses: actions/setup-node@v4
                with:
                    node-version: 20
                    cache: yarn  # 缓存依赖，减少构建时间

            -   name: Install dependencies
                run: yarn install  # 安装依赖

            -   name: Set base path for VitePress
                run: |
                    case "${{ github.ref_name }}" in
                      "main")
                        echo "VITEPRESS_BASE=/" >> $GITHUB_ENV  # 设置根路径
                        ;;
                      "alpha.x")
                        echo "VITEPRESS_BASE=/alpha/" >> $GITHUB_ENV  # 设置 /alpha/ 路径
                        ;;
                      *)
                        echo "Unknown branch, no base path set."
                        ;;
                    esac

            -   name: Build with VitePress
                run: yarn docs:build  # 生成构建文件

            -   name: Check if build files exist
                run: ls -la docs/.vitepress/dist  # 确认构建文件是否生成

            -   name: Set CNAME based on branch
                run: |
                    case "${{ github.ref_name }}" in
                      "main")
                        echo "waplar.cn" > docs/.vitepress/dist/CNAME  # 设置主域名
                        ;;
                      "alpha.x")
                        echo "alpha.waplar.cn" > docs/.vitepress/dist/CNAME  # 设置 alpha 子域名
                        ;;
                      *)
                        echo "Unknown branch, no CNAME set."
                        ;;
                    esac

            -   name: Upload artifact for deployment
                uses: actions/upload-artifact@v4
                with:
                    name: site-build
                    path: docs/.vitepress/dist  # 上传构建文件所在的目录

    deploy:
        needs: build  # 确保 `deploy` job 等待 `build` job 完成
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout gh-pages
                uses: actions/checkout@v4
                with:
                    ref: gh-pages  # 检出 `gh-pages` 分支

            -   name: Download artifact for deployment
                uses: actions/download-artifact@v4
                with:
                    name: site-build
                    path: docs/.vitepress/dist  # 下载到该目录

            -   name: Set up Git configuration
                run: |
                    git config --global user.name "GitHub Actions"
                    git config --global user.email "github-actions@users.noreply.github.com"

            -   name: Create directory for branch
                run: |
                    # 确保下载的文件存在
                    ls -la docs/.vitepress/dist
                    
                    # 根据分支，将文件复制到对应的子目录
                    if [ "${{ github.ref_name }}" == "main" ]; then
                      mkdir -p gh-pages/  # 创建 gh-pages 根目录
                      cp -r docs/.vitepress/dist/* gh-pages/  # 复制构建文件到 gh-pages 根目录
                    elif [ "${{ github.ref_name }}" == "alpha.x" ]; then
                      mkdir -p gh-pages/alpha  # 创建 alpha 子目录
                      cp -r docs/.vitepress/dist/* gh-pages/alpha/  # 复制构建文件到 gh-pages/alpha
                    fi

            -   name: Commit and push changes to gh-pages
                run: |
                    git add -A
                    git commit -m "Deploy ${{ github.ref_name }} branch" || echo "No changes to commit"
                    git push --force https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }} gh-pages  # 使用 PAT 进行推送
                env:
                    PAT_TOKEN: ${{ secrets.PAT_TOKEN }}  # 使用 PAT 进行身份验证

        environment:
            name: github-pages
            url: ${{ steps.deployment.outputs.page_url }}
